{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "Contacts API",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "description": "This is a sample server for a contacts API."
  },
  "servers": [
    {
      "url": "http://localhost:3000"
    },
    {
      "url": "https://api.example.com"
    }
  ],
  "tags": [
    {
      "name": "Recipes",
      "description": "Operations about students."
    },
    {
      "name": "Auth",
      "description": "Auth operations."
    },
    {
      "name": "User",
      "description": "User operations."
    },
    {
      "name": "Ingredients",
      "description": "Ingredient operations."
    },
    {
      "name": "Categories",
      "description": "Category operations."
    }
  ],
  "paths": {
    "/api/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Register a new user",
        "operationId": "registerUser",
        "description": "Register a new user with payload",
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "email",
                  "password"
                ],
                "properties": {
                  "name": {
                    "description": "Name of the user",
                    "type": "string",
                    "example": "John Doe"
                  },
                  "email": {
                    "description": "User's email address",
                    "type": "string",
                    "format": "email",
                    "example": "user@example.com"
                  },
                  "password": {
                    "description": "Password for the user account",
                    "type": "string",
                    "format": "password",
                    "example": "strongpassword123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully registered a user!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "_id",
                        "name",
                        "email"
                      ],
                      "properties": {
                        "_id": {
                          "description": "User's unique identifier",
                          "type": "string",
                          "example": "65e4decdd286b30065d54af9"
                        },
                        "name": {
                          "description": "Name of the user",
                          "type": "string",
                          "example": "John Doe"
                        },
                        "email": {
                          "description": "Email address of the user",
                          "type": "string",
                          "format": "email",
                          "example": "user@example.com"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "description": "User already exists",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 409
                    },
                    "message": {
                      "type": "string",
                      "example": "Email in use"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "User login",
        "operationId": "loginUser",
        "description": "User login with email and password",
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "description": "User's email address",
                    "type": "string",
                    "format": "email",
                    "example": "user@example.com"
                  },
                  "password": {
                    "description": "Password for the user account",
                    "type": "string",
                    "format": "password",
                    "example": "strongpassword123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully logged in an user!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully logged in an user!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "accessToken"
                      ],
                      "properties": {
                        "accessToken": {
                          "description": "JWT access token for the user",
                          "type": "string",
                          "example": "eyJhbGciOi"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Logout user",
        "operationId": "logoutUser",
        "description": "Logs out the user by clearing the session",
        "security": [],
        "parameters": [
          {
            "in": "cookie",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Session ID cookie"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully logged out user"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/auth/refresh": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Refresh user session",
        "operationId": "refreshUserSession",
        "description": "Refreshes the user session using cookies",
        "security": [],
        "parameters": [
          {
            "in": "cookie",
            "name": "refreshToken",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Refresh token cookie"
          },
          {
            "in": "cookie",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Session ID cookie"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully refreshed a session!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "accessToken"
                      ],
                      "properties": {
                        "accessToken": {
                          "description": "JWT access token for the user",
                          "type": "string",
                          "example": "eyJhbGciOi"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/recipes": {
      "get": {
        "tags": [
          "Recipes"
        ],
        "summary": "Get recipes",
        "operationId": "getRecipes",
        "description": "Retrieve a list of recipes with optional filtering and pagination",
        "security": [],
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "description": "Filter recipes by name",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Spaghetti Carbonara"
            }
          },
          {
            "in": "query",
            "name": "category",
            "description": "Filter recipes by category",
            "required": false,
            "schema": {
              "type": "string",
              "example": "main course"
            }
          },
          {
            "in": "query",
            "name": "ingredient",
            "description": "Filter recipes by ingredient",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Spaghetti"
            }
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page number for pagination",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "example": 1
            }
          },
          {
            "in": "query",
            "name": "perPage",
            "description": "Number of recipes per page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "example": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found recipes!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found recipes!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "data",
                        "page",
                        "perPage",
                        "totalItems",
                        "totalPages",
                        "hasNextPage",
                        "hasPreviousPage"
                      ],
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/recipe"
                          }
                        },
                        "page": {
                          "type": "integer",
                          "example": 1
                        },
                        "perPage": {
                          "type": "integer",
                          "example": 10
                        },
                        "totalPages": {
                          "type": "integer",
                          "example": 5
                        },
                        "totalItems": {
                          "type": "integer",
                          "example": 50
                        },
                        "hasNextPage": {
                          "type": "boolean",
                          "example": true
                        },
                        "hasPreviousPage": {
                          "type": "boolean",
                          "example": false
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Recipes"
        ],
        "summary": "Create recipe",
        "operationId": "createRecipe",
        "description": "Create a new recipe",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "ingredients",
                  "instructions",
                  "description"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the recipe",
                    "example": "Spaghetti Carbonara"
                  },
                  "photo": {
                    "description": "Recipe's photo image file",
                    "type": "string",
                    "format": "binary"
                  },
                  "ingredients": {
                    "type": "string",
                    "description": "List of ingredients in JSON format",
                    "example": "[{\"name\": \"Noodles\", \"quantity\": \"200g\"}, {\"name\": \"Paprika\", \"quantity\": \"2\"}]"
                  },
                  "description": {
                    "description": "Detailed description of the recipe",
                    "type": "string",
                    "example": "A classic Italian pasta dish made with eggs, cheese, pancetta, and pepper."
                  },
                  "instructions": {
                    "type": "string",
                    "description": "Step-by-step instructions to prepare the recipe",
                    "example": "Cook spaghetti, mix with eggs and cheese, add bacon and pepper."
                  },
                  "category": {
                    "type": "string",
                    "description": "Category of the recipe (e.g., main course, dessert)",
                    "example": "Seafood"
                  },
                  "cookingTime": {
                    "type": "integer",
                    "description": "Estimated cooking time in minutes",
                    "example": 30
                  },
                  "foodEnergy": {
                    "type": "number",
                    "description": "Estimated food energy in kcal",
                    "example": 600
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Recipe created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Recipe created successfully"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/recipe"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/recipes/{id}": {
      "get": {
        "tags": [
          "Recipes"
        ],
        "summary": "Get recipe by id",
        "operationId": "getRecipesById",
        "description": "Retrieve a recipe by its unique identifier",
        "security": [],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Unique identifier of the recipe",
            "schema": {
              "type": "string",
              "example": "65e4decdd286b30065d54af9"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found recipe!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Recipe found successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/recipe"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Recipes"
        ],
        "summary": "Delete recipe",
        "operationId": "deleteRecipe",
        "description": "Delete a recipe by its unique identifier",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Unique identifier of the recipe to delete",
            "schema": {
              "type": "string",
              "example": "65e4decdd286b30065d54af9"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the recipe"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/recipes/{id}/favourite": {
      "patch": {
        "tags": [
          "Recipes"
        ],
        "summary": "Update recipe favourite status",
        "operationId": "updateRecipeFavourite",
        "description": "Update the favourite status of a recipe",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Unique identifier of the recipe",
            "schema": {
              "type": "string",
              "example": "65e4decdd286b30065d54af9"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated recipe favourite status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Recipe favourite status updated successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/recipe"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/recipes/favourites": {
      "patch": {
        "tags": [
          "Recipes"
        ],
        "summary": "Get user favourite recipes",
        "operationId": "getFavouriteRecipes",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "Retrieve a list of favourite recipes with optional filtering and pagination",
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "description": "Filter recipes by name",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Spaghetti Carbonara"
            }
          },
          {
            "in": "query",
            "name": "category",
            "description": "Filter recipes by category",
            "required": false,
            "schema": {
              "type": "string",
              "example": "main course"
            }
          },
          {
            "in": "query",
            "name": "ingredient",
            "description": "Filter recipes by ingredient",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Spaghetti"
            }
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page number for pagination",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "example": 1
            }
          },
          {
            "in": "query",
            "name": "perPage",
            "description": "Number of recipes per page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "example": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found favourite recipes!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found favourite recipes!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "data",
                        "page",
                        "perPage",
                        "totalItems",
                        "totalPages",
                        "hasNextPage",
                        "hasPreviousPage"
                      ],
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "oneOf": [
                              {
                                "$ref": "#/components/schemas/recipe"
                              },
                              {
                                "$ref": "#/components/schemas/favRecycleBin"
                              }
                            ]
                          }
                        },
                        "page": {
                          "type": "integer",
                          "example": 1
                        },
                        "perPage": {
                          "type": "integer",
                          "example": 10
                        },
                        "totalPages": {
                          "type": "integer",
                          "example": 5
                        },
                        "totalItems": {
                          "type": "integer",
                          "example": 50
                        },
                        "hasNextPage": {
                          "type": "boolean",
                          "example": true
                        },
                        "hasPreviousPage": {
                          "type": "boolean",
                          "example": false
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/recipes/mine": {
      "get": {
        "tags": [
          "Recipes"
        ],
        "summary": "Get user recipes",
        "operationId": "getUserRecipes",
        "description": "Retrieve a list of recipes created by the authenticated user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "description": "Filter recipes by name",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Spaghetti Carbonara"
            }
          },
          {
            "in": "query",
            "name": "category",
            "description": "Filter recipes by category",
            "required": false,
            "schema": {
              "type": "string",
              "example": "main course"
            }
          },
          {
            "in": "query",
            "name": "ingredient",
            "description": "Filter recipes by ingredient",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Spaghetti"
            }
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page number for pagination",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "example": 1
            }
          },
          {
            "in": "query",
            "name": "perPage",
            "description": "Number of recipes per page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "example": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found user recipes!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "User recipes found successfully"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "data",
                        "page",
                        "perPage",
                        "totalItems",
                        "totalPages",
                        "hasNextPage",
                        "hasPreviousPage"
                      ],
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/recipe"
                          }
                        },
                        "page": {
                          "type": "integer",
                          "example": 1
                        },
                        "perPage": {
                          "type": "integer",
                          "example": 10
                        },
                        "totalPages": {
                          "type": "integer",
                          "example": "5s"
                        },
                        "totalItems": {
                          "type": "integer",
                          "example": 50
                        },
                        "hasNextPage": {
                          "type": "boolean",
                          "example": true
                        },
                        "hasPreviousPage": {
                          "type": "boolean",
                          "example": false
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/categories": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Get categories",
        "operationId": "getCategories",
        "description": "Retrieve a list of categories with optional filtering and pagination",
        "security": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved categories!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Categories retrieved successfully"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/category"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/ingredients": {
      "get": {
        "tags": [
          "Ingredients"
        ],
        "summary": "Get ingredients",
        "operationId": "getIngredients",
        "description": "Retrieve a list of ingredients with optional filtering and pagination",
        "security": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved ingredients!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Ingredients retrieved successfully"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/recipe"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/user/me": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get user data",
        "operationId": "getUserData",
        "description": "Retrieve the authenticated user data",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved user data!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "User data retrieved successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/user"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "recipe": {
        "type": "object",
        "required": [
          "_id",
          "userId",
          "name",
          "description",
          "ingredients",
          "instructions",
          "category",
          "cookingTime"
        ],
        "properties": {
          "_id": {
            "description": "Recipe's unique identifier",
            "type": "string",
            "example": "65e4decdd286b30065d54af9"
          },
          "userId": {
            "description": "ID of the user who created the recipe",
            "type": "string",
            "example": "65e4decdd286b30065d54af9"
          },
          "name": {
            "description": "Name of the recipe",
            "type": "string",
            "example": "Spaghetti Carbonara"
          },
          "photo": {
            "description": "URL of the recipe photo",
            "type": "string",
            "format": "uri",
            "example": "https://example.com/photo.jpg"
          },
          "description": {
            "description": "Detailed description of the recipe",
            "type": "string",
            "example": "A classic Italian pasta dish made with eggs, cheese, pancetta, and pepper."
          },
          "ingredients": {
            "description": "List of ingredients required for the recipe",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "ingredient": {
                  "description": "ID of the ingredient",
                  "type": "string",
                  "example": "65e4decdd286b30065d54af9"
                },
                "quantity": {
                  "description": "Quantity of the ingredient",
                  "type": "string",
                  "example": "200g"
                }
              }
            }
          },
          "instructions": {
            "type": "string",
            "description": "Step-by-step instructions to prepare the recipe",
            "example": "Cook spaghetti, mix with eggs and cheese, add bacon and pepper."
          },
          "category": {
            "description": "ID of the category of the recipe ",
            "type": "string",
            "example": "65e4decdd286b30065d54af9"
          },
          "cookingTime": {
            "description": "Estimated cooking time in minutes",
            "type": "integer",
            "example": 30
          },
          "foodEnergy": {
            "description": "Estimated food energy in kcal",
            "type": "number",
            "example": 600
          }
        }
      },
      "favRecycleBin": {
        "type": "object",
        "required": [
          "_id",
          "name",
          "description",
          "cookingTime",
          "category"
        ],
        "properties": {
          "_id": {
            "description": "Recipe's unique identifier",
            "type": "string",
            "example": "65e4decdd286b30065d54af9"
          },
          "name": {
            "description": "Name of the recipe",
            "type": "string",
            "example": "Spaghetti Carbonara"
          },
          "photo": {
            "description": "URL of the recipe photo",
            "type": "string",
            "format": "uri",
            "example": "https://example.com/photo.jpg"
          },
          "description": {
            "description": "Detailed description of the recipe",
            "type": "string",
            "example": "A classic Italian pasta dish made with eggs, cheese, pancetta, and pepper."
          },
          "category": {
            "description": "ID of the category of the recipe ",
            "type": "string",
            "example": "65e4decdd286b30065d54af9"
          },
          "cookingTime": {
            "description": "Estimated cooking time in minutes",
            "type": "integer",
            "example": 30
          },
          "foodEnergy": {
            "description": "Estimated food energy in kcal",
            "type": "number",
            "example": 600
          },
          "deleted": {
            "description": "Indicates whether the recipe is deleted",
            "type": "boolean",
            "example": true
          }
        }
      },
      "user": {
        "type": "object",
        "required": [
          "_id",
          "name",
          "email",
          "password"
        ],
        "properties": {
          "_id": {
            "description": "User's unique identifier",
            "type": "string",
            "example": "65e4decdd286b30065d54af9"
          },
          "name": {
            "description": "Name of the user",
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "description": "Email address of the user",
            "type": "string",
            "format": "email",
            "example": "user@example.com"
          },
          "password": {
            "description": "Password for the user account",
            "type": "string",
            "format": "password",
            "example": "strongpassword123"
          }
        }
      },
      "ingredient": {
        "type": "object",
        "required": [
          "_id",
          "name"
        ],
        "properties": {
          "_id": {
            "description": "Ingredient's unique identifier",
            "type": "string",
            "example": "65e4decdd286b30065d54af9"
          },
          "name": {
            "description": "Name of the category",
            "type": "string",
            "example": "Potato"
          }
        }
      },
      "category": {
        "type": "object",
        "required": [
          "_id",
          "name"
        ],
        "properties": {
          "_id": {
            "description": "Category's unique identifier",
            "type": "string",
            "example": "65e4decdd286b30065d54af9"
          },
          "name": {
            "description": "Name of the category",
            "type": "string",
            "example": "Main Course"
          }
        }
      },
      "session": {
        "type": "object",
        "required": [
          "_id",
          "userId",
          "accessToken",
          "refreshToken",
          "accessTokenValidUntil",
          "refreshTokenValidUntil"
        ],
        "properties": {
          "_id": {
            "description": "Session's unique identifier",
            "type": "string",
            "example": "65e4decdd286b30065d54af9"
          },
          "userId": {
            "description": "ID of the user associated with the session",
            "type": "string",
            "example": "65e4decdd286b30065d54af9"
          },
          "accessToken": {
            "description": "JWT access token for the session",
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
          },
          "refreshToken": {
            "description": "JWT refresh token for the session",
            "type": "string",
            "example": "d1f2e3g4h5i6j7k8l9m0n1o2p3q4r5s6t7u8v9w0x1y2z3a4b5c6d7e8f9g0h1i2j3k4l5m6n7o8p9q0r1s2t3u4v5w6x7y8z"
          },
          "accessTokenValidUntil": {
            "description": "Timestamp when the access token expires",
            "type": "string",
            "format": "date-time",
            "example": "2023-10-01T12:00:00Z"
          },
          "refreshTokenValidUntil": {
            "description": "Timestamp when the refresh token expires",
            "type": "string",
            "format": "date-time",
            "example": "2023-12-01T12:00:00Z"
          }
        }
      }
    },
    "responses": {
      "400": {
        "description": "Bad request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "Bad Request"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid request data"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "UnauthorizedError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Access token expired"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "Not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "Not Found"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "The requested resource was not found"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "message": {
                  "type": "string",
                  "example": "Internal Server Error"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "An unexpected error occurred"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}